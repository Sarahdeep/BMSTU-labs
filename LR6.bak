(define (check-frac str)
  (if (or (char-numeric? (string-ref  str 0)) (and (or (equal? (string-ref str 0) #\- ) (equal? (string-ref  str 0) #\+ ))  (char-numeric? (string-ref  str 1))))
      (lekser (string->list (substring   str 1)))
      #f))
  (define (lekser xs)
    (cond
      ((char-numeric? (car xs)) (lekser (cdr xs)))
      ((and (equal? (car xs) #\/) (char-numeric? (cadr xs))) (denominate (cdr xs)))
      (else #f)))
(define  (denominate xs)
  (cond
    ((null? xs) #t)
    ((char-numeric? (car xs)) (denominate (cdr xs)))
    (else #f)))
(define (scan-frac str)
  (and (check-frac str) (let loop ((str (string->list str))
                                   (res '()))
                         (if (equal? (car str) #\/)
                             (eval (list '/ (string->number (list->string (reverse res)))
                                          (string->number (list->string (cdr str)))) (interaction-environment)) 
                             (loop (cdr str) (cons  (car str) res))))))  
                          
                                   
                         
    
      
    
    
      
      