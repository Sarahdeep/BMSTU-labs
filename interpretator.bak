(define ie (interaction-environment))
(define (interpret program stack) 
  (define (main counter stack return-stack dictionary)
    (if (=  counter (vector-length program) )
        stack
        (let ((word (vector-ref  program counter)))
          (cond ((number? word) (main (+ counter 1) (cons  word stack) return-stack dictionary))
                ((or (equal? word '+)  (equal? word '*) (equal? word '-) (equal? word '/))
                 (main (+ counter 1) (cons ((eval word ie) (cadr stack) (car stack)) (cddr stack)) return-stack dictionary))
                ((equal? word 'mod) (main (+ counter 1) (cons (remainder (car stack) (cadr stack)) (cddr stack)) return-stack dictionary))
                ((equal? word 'neg) (main (+ counter 1) (cons (- 0 (car stack)) (cdr stack)) return-stack dictionary))
                ((or (equal? word '=) (equal? word '>) (equal? word '<))
                 (main (+ counter 1) (cons (if ((eval word ie) (car stack) (cadr stack)) -1 0) (cddr stack)) return-stack dictionary))
                ((equal? word 'not) (main (+ counter 1) (cons (if (car stack) 0 -1) (cdr stack)) return-stack dictionary))
                ((equal? word 'and) (main (+ counter 1) (cons (if (not (or (equal? (car stack) 0)
                    (equal? (cadr stack) 0))) -1 0) (cddr stack)) return-stack dictionary))
                ((equal? word 'or) (main (+ counter 1) (cons (if (or (not (equal? (car stack) 0))
                    (not (equal? (cadr stack) 0))) -1 0) (cddr stack)) return-stack dictionary))
                ((equal? word 'drop) (main (+ counter 1)  (cdr stack) return-stack dictionary))
                ((equal? word 'swap)
                 (main (+ counter 1) (append  (list (cadr stack)) (list (car stack)) (cddr stack)) return-stack dictionary))
                ((equal? word 'dup) (main (+ counter 1) (cons (car stack)  stack) return-stack dictionary))
                ((equal? word 'over) (main (+ counter 1) (cons  (cadr stack)   stack) return-stack dictionary))
                ((equal? word 'rot)
                 (main (+ counter 1) (append (list (caddr stack) (cadr stack) (car stack))   (cdddr stack)) return-stack dictionary))
                ((equal? word 'depth) (main (+ counter 1) (cons (length stack)  stack) return-stack dictionary))
                ((equal? word 'define) (main (count counter program) stack  return-stack (cons (list  (vector-ref  program (+ counter 1)) (+ counter 2)) dictionary)))
                ((assoc word dictionary) (main (cadr (assoc word dictionary)) stack (cons (+ counter 1) return-stack) dictionary))
                ((equal? word 'end) (main (car return-stack) stack return-stack dictionary))
                ))))
    (main 0 stack '() '()))
(define (count counter vect)
  (if (equal? (vector-ref  vect counter) 'end)
      (+ counter 1) 
      (count (+ counter 1) vect)))
  ;(define (calculator word)
  ; (if (or (= word '+) (= word '*) (= word '-) (= word '/))
  ;    (main (+ counter 1) (cons (* (car stack) (cadr stack)) (cddr stack)) return-stack dictionary)