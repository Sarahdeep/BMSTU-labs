(define counter 0)
(define (string-trim-left str) 
  (if (char-whitespace? (string-ref str counter))
      (begin (set! counter (+ counter 1))
             (string-trim-left str))
      (let((local counter))
        (set! counter 0)
        (substring str local))
      ))
(string-trim-left  "\t\tabc def")
(display #\newline)
;________________________________________________________________________________________________;
(define (string-trim-right str)
  (define counter-ach (- (string-length str) 1))
  (define (loop str)  
    (if (char-whitespace? (string-ref str counter-ach))
        (begin (set! counter-ach (- counter-ach 1))
               (loop str))
        (substring str 0 (+ counter-ach 1))))
  (loop str))
(string-trim-right "abc def\t") 
(display #\newline)   
;_________________________________________________________________________________________________________________;
(define (string-trim str) (string-trim-left (string-trim-right str)))
(string-trim       "\t abc def \n")
(display #\newline)
;________________________________________________________
(define (string-prefix? a b)
  (and (> (string-length b) (string-length a)) (equal? a (substring b 0  (string-length a))) ))
(string-prefix? "abc" "abcdef")   
(string-prefix? "bcd" "abcdef")  
(string-prefix? "abcdef" "abc") 