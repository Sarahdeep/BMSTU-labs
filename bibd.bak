
    
(define (make-multi-vector . xs)
  (let ( (sizes (car xs))
         (fill
          (if (null? (cdr xs))
              0
              (cadr xs))))
    (vector (append sizes (list fill))))


(define m (make-multi-vector '(11 12 9 16)))
(define (my-predicate vect num)
  (or (null? num)
  (and (>= (car  vect ) (car num))
       (my-predicate (cdr vect ) (cdr num)  ))))
  
(define (multi-vector-set! vect num def)
  (if (my-predicate (vector-ref vect 0) num)
  (set! m (list->vector (append (vector->list m) (list num) (list def))))
  #f))

(define (multi-vector-ref vect num ) (loop count res)
  (if (equal? (vector-ref count) num)
  (vector-ref (+ count 1))
  (begin (multi-vector-set! vect num (vector-ref vect 1))
         (vector-ref vect 1)))
  



















  