(define ie (interaction-environment))
(define (lister xs)
  (if (list? xs)
  xs
  (list xs)))

(define (derivative xs)
  (cond ((number? (car (lister xs))) 0)
        
        ((equal? (car (lister xs)) 'x) 1)
        ((equal? (car (lister xs)) '-x) -1)
        ((equal? (car (lister xs)) '-)
         (if (< (length xs) 3)
             `(- ,(derivative (cadr xs)))
         (if (> (length (lister xs)) 3)
             `(- ,(derivative  (lister (cadr xs))) ,(derivative (cons '+ (cddr xs))))    
             `(- ,(derivative  (lister (cadr xs))) ,(derivative (lister (caddr xs)))))))
        ((equal? (car xs) '*)
         (if (> (length xs) 3)
             `(+ (* ,(derivative (lister (cadr xs))) ,(cons '* (cddr xs))) (* ,(cadr xs) ,(derivative (cons '* (cddr xs)))))   
             `(+ (* ,(derivative (lister (cadr xs))) ,(caddr xs)) (* ,(cadr xs) ,(derivative (lister (caddr xs)))))))
        ((equal? (car xs) 'expt)
         (if (member 'x (lister (caddr xs)))
             `(* (expt ,(cadr xs) ,(caddr xs)) (log ,(cadr xs) ,(exp 1)) ,(derivative (lister (caddr xs))))   
             (if (equal? (cadr xs) 'x)
                 `(* ,(caddr xs) (expt  x ,(- (caddr xs) 1)))   
                 `(* ,(caddr xs) (expt  ,(derivative (lister (cdr xs))) ,(- (caddr xs) 1))))))
        ((equal? (car xs) 'exp)
         `(* (exp ,(cadr xs)) ,(derivative (lister (cadr xs)))))
        ((equal? (car xs) 'log)
         `(* (/ 1 ,(cadr xs)) ,(derivative (lister (cadr xs)))))
        ((equal? (car xs) '/)
         (if (> (length xs) 3)
             `(/ (- (* ,(derivative (lister (cadr xs))) ,(cons '* (cddr xs))) (* ,(cadr xs) ,(derivative (cons '* (cddr xs))))) (expt ,(cons '* (cddr xs)) 2)) 
             `(/ (- (* ,(derivative (lister (cadr xs))) ,(caddr xs)) (* ,(cadr xs) ,(derivative (lister (caddr xs))))) (expt ,(caddr xs) 2))))
        ((equal? (car xs) 'cos)
         `(* -1 (sin ,(cadr xs)) ,(derivative (lister (cadr xs))))) 
           ((equal? (car xs) 'sin)
         `(*  (cos ,(cadr xs)) ,(derivative (lister (cadr xs)))))
        ((equal? (car xs) '+)
         (if (> (length xs) 3)
             `(+ ,(derivative (lister (cadr xs))) ,(derivative (cons '+ (cddr xs))))
             `(+ ,(derivative (lister (cadr xs))) ,(derivative (lister (caddr xs))))))))
